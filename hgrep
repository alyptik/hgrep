#!/usr/bin/perl -s

use strict;
use warnings;
use File::Grep qw( fgrep fmap fdo );
use File::Find ();
# Set the variable $File::Find::dont_use_nlink if you're using AFS,
# since AFS cheats.
# for the convenience of &wanted calls, including -eval statements:
use vars qw/*name *dir *prune/;
*name   = *File::Find::name;
*dir    = *File::Find::dir;
*prune  = *File::Find::prune;
sub wanted;

my $usage = "Usage: hgrep -hrv -n=\"#\" -c=\"(y|n)\" <query>
  -h:		Print help
  -r:		Parse query as a regular expression
  -v:		Show version
  -n=\"#\":	Number of matches to print
  -c=\"(y|n)\":	Colorize output (default: enabled)";
my $version = v0.1.1;
my @query = @ARGV;
my @files;
my $num;
my $color;

# Parse command line switches
{
	no strict;
	no warnings;

	print "$usage\n" if $h;
	printf "hgrep v%vd\n", $version if $v;
	exit if ($h || $v);
	map { $_ = qr/$_/ } @query if $r;
	map { $_ = quotemeta $_ } @query unless $r;
	$num = $n // 10;
	$color = $c // 1;
	$color = 0 if $color =~ m/^(?:0|no?|false|never)$/i;
}

print "# of matches that will be printed: ".$num."\n"."Queries: \"".join("\" \"", @query)."\"\n";

# Traverse desired filesystems
File::Find::find({wanted => \&wanted}, '/usr/include');

exit;

sub wanted {
	my ($dev, $ino, $mode, $nlink, $uid, $gid);
	(($dev, $ino, $mode, $nlink, $uid, $gid) = lstat($_)) &&
		-f _ && /^.*\.h\z/s &&
		# TODO: Finish color handling
		map {
			my $cur = $_;
			fdo {
				if (m/$cur/) {
					$num--;
					s/(?=$cur)/`tput setaf 9 && tput bold`/eg &&
					s/(?<=$cur)/`tput sgr0`/eg if $color;
					print;
				}
				exit if $num == 0;
			} $name;
		} @query;
}

